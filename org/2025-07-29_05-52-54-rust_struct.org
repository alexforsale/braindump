:PROPERTIES:
:ID:       95b9178e-bd8a-4fdf-a993-7d412d455759
:END:
#+title: rust struct
#+author: Kristian Alexander P
#+date: <2025-08-16 Sat>
#+description: 
#+hugo_base_dir: ..
#+hugo_section: posts
#+hugo_categories: programming
#+property: header-args :exports both
#+hugo_tags: rust programming

Structs are similar to tuples, in that both hold multiple related values. Like tuples, the pieces of a struct can be different types. Unlike with tuples, in a struct you’ll name each piece of data so it’s clear what the values mean. Adding these names means that structs are more flexible than tuples: you don’t have to rely on the order of the data to specify or access the values of an instance.

#+begin_src rust
  #[derive(Debug)]
  struct Rectangle {
      width: u32,
      height: u32,
  }

  impl Rectangle {
      fn area(&self) -> u32 {
          self.width * self.height
      }
  }

  fn main() {
      let rect1 = Rectangle {
          width: 30,
          height: 50,
      };

      println!(
          "The area of the rectangle is {} square pixels.",
          rect1.area()
      );
  }
#+end_src

#+RESULTS:
: The area of the rectangle is 1500 square pixels.
