:PROPERTIES:
:ID:       6d95bd2e-1a31-4b28-8765-6b711eb8bfbd
:END:
#+title: rust common collection
#+author: Kristian Alexander P
#+date: <2025-08-01 Fri>
#+description:
#+hugo_base_dir: ..
#+hugo_section: posts
#+hugo_categories: programming
#+property: header-args :exports both
#+hugo_tags: rust programming
* Common Collection
[[id:b0c3a713-8b46-4f98-857d-7145ced06d68][Rust]]’s standard library includes a number of very useful data structures called collections. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data that these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you’ll develop over time.
** Vectors
The first collection type we’ll look at is =Vec<T>=, also known as a vector. Vectors allow you to store more than one value in a single data structure that puts all the values next to each other in memory. Vectors can only store values of the same type. They are useful when you have a list of items, such as the lines of text in a file or the prices of items in a shopping cart.

#+caption: Creating a new, empty vector to hold values of type =i32=
#+begin_src rust
  let v: Vec<i32> = Vec::new();
#+end_src

More often, you’ll create a =Vec<T>= with initial values and Rust will infer the type of value you want to store, so you rarely need to do this type annotation. Rust conveniently provides the =vec!= macro, which will create a new vector that holds the values you give it.
